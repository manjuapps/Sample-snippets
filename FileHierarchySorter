import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class FileHierarchySorter {
    public static void main(String[] args) {
        // Example root directory
        File rootDirectory = new File("path/to/root/directory");

        // List to store the sorted files
        List<File> sortedFiles = new ArrayList<>();

        // Process the directory and add files based on the criteria
        processDirectory(rootDirectory, sortedFiles);

        // Print the sorted list
        System.out.println("Sorted files and directories:");
        for (File file : sortedFiles) {
            System.out.println(file.getPath());
        }
    }

    /**
     * Recursively processes a directory, adding parent first and then its children.
     * Filters files based on the condition that their names end with "_page.xml".
     *
     * @param directory   The parent directory to process.
     * @param sortedFiles The list where files and directories are added.
     */
    private static void processDirectory(File directory, List<File> sortedFiles) {
        if (directory.isDirectory()) {
            // Add the parent directory first
            sortedFiles.add(directory);

            // Get all files and directories within the current directory
            File[] children = directory.listFiles();

            if (children != null) {
                // Sort children alphabetically
                List<File> childrenList = new ArrayList<>();
                Collections.addAll(childrenList, children);
                childrenList.sort(Comparator.comparing(File::getName));

                // Process each child
                for (File child : childrenList) {
                    if (child.isDirectory()) {
                        // Recursively process subdirectories
                        processDirectory(child, sortedFiles);
                    } else if (child.isFile() && child.getName().endsWith("_page.xml")) {
                        // Add files that match the condition
                        sortedFiles.add(child);
                    }
                }
            }
        } else if (directory.isFile() && directory.getName().endsWith("_page.xml")) {
            // Add files that match the condition
            sortedFiles.add(directory);
        }
    }
}
